일바 사용자 -> $
관리자(root) -> # (실습) 
$pwd   
$Is  //LIST
$Is -CF
$Is -a
$Is -aCF

$ sudo passwd root //암호요구
#hanback!
c   //암호설정
c

$ su - 
c

# pwd // print working directory
# ls    // list
# ls -a
$#man gcc//메뉴얼 
#ps  //process 상태
#gedit .bashrc (메모장)ㅎ설정정보
#source .bashrc(수정된 내용 다시 읽기)
c클리어
h이전 명령어 보기

init 0 (종료)ㅗ
-------------------------

gedit hello.c &
process아이디

ps
kill -9 process아이디
ps

!g
가장최근에 g로 시작하는 명령어 

ls -l
ls
gcc hello.c
ls
./a.out

echo PATH
echo $PATH

root@ubuntu:~# ls
Desktop    Downloads  Music     Public  Templates  Videos
Documents  hello.c    Pictures  repo    test
root@ubuntu:~# gcc -c hello.c
root@ubuntu:~# ls
Desktop    Downloads  hello.o  Pictures  repo       test
Documents  hello.c    Music    Public    Templates  Videos
root@ubuntu:~# 

gcc -o hello test.c 컴파일과 링크를 거쳐서 -o output 을 hello라고 하겠다.
gcc -c  컴파일

gcc o hello.static hello.c -static
ls -l
static 사용시 라이브러리 코드까지 다들어가게 됨 그래서 파일사이즈가 커질수 밖에 없음

ldd hello  hello를 동작하기위한 라이브러리들을 알려줌

so (shared object)
=> DLL 과같다 dynamic link library

not a dynamic executable
라이브러리를 쓰지 않는다

root@ubuntu:~# ldd hello
	linux-gate.so.1 =>  (0x0042b000)
	libc.so.6 => /lib/libc.so.6 (0x0026e000)
	/lib/ld-linux.so.2 (0x00ac3000)
root@ubuntu:~# ldd hello.static
	not a dynamic executable

nm hello
가상주소와 함께 symbol을 표시해줌

실행파일 형식 ELF  PE두가지가 있다
ELF는 linux PE는 windows용이다.
모든 파일은 형식이 header와 body로 이루어 진다.

root@ubuntu:~# ls -l /lib/libc.so.6
lrwxrwxrwx 1 root root 14 2011-09-20 22:54 /lib/libc.so.6 -> libc-2.12.1.so

rwx 파일 형식 read write 실행
맨앞이 l 일경우 link가 되어있다 위의 화살표처럼


$이전명령의 전체를 의미함]

ls -l !$


strip

ls -l hello 
strip hello
ls -l hello
파일사이즈가 줄어들게 된다
./hello
nm hello
컴파일해서 나온 파일은 다이나믹 링크 라이브러리를 사용하고있다.
strip은 실행하는데 필요없는 부분들을 삭제시켜줌

임베디드 장치는 최대한 최적화를 시켜라!
root@ubuntu:~# size hello
   text	   data	    bss	    dec	    hex	filename
    879	    256	      8	   1143	    477	hello

bss는 초기화되지않은 데이터

man readelf

objdump -d hello | m

리눅스 커널은 monolithic커널이다. ->linux
파일 하나가아니라 여러조각이라 micro kernel이라 부른다 ->windows

linux kernel -> vmlinux -> ELF (파일이 크다_)
vmlinux -> objcopy-> compress -> bzImage
Kernel image -> vmlinux
Compressed kernel image -> bzimage


root@ubuntu:~# objcopy -S -O binary hello hello.bin
root@ubuntu:~# ls
Desktop    Downloads  hello.bin  hello.static  Pictures  repo       test
Documents  hello      hello.c    Music         Public    Templates  Videos
root@ubuntu:~# 

root@ubuntu:~# file hello
hello: ELF 32-bit LSB executable(리틀엔디안), Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.15, not stripped
root@ubuntu:~# file hello.bin
hello.bin: data
root@ubuntu:~# ./hello.bin
bash: ./hello.bin: cannot execute binary file

root@ubuntu:~# which gcc
/usr/bin/gcc
root@ubuntu:~# which arm-linux-gcc
/usr/local/arm/arm-2009q3/bin/arm-linux-gcc
이런곳에있다는걸 표현



root@ubuntu:~# arm-linux-gcc -o hello.arm hello.c
root@ubuntu:~# ls
Desktop    hello      hello.c       Pictures  Templates
Documents  hello.arm  hello.static  Public    test
Downloads  hello.bin  Music         repo      Videos
root@ubuntu:~# file hello.arm
hello.arm: ELF 32-bit LSB executable, ARM, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.16, not stripped
root@ubuntu:~# ./hello.arm
bash: ./hello.arm: cannot execute binary file

기계어가 intel cpu 코드가 아니기에 실행이 안된다.


root@ubuntu:~# arm-linux-gcc -o hello.arm.st hello.c -static
root@ubuntu:~# ls -l
total 1304
drwxr-xr-x 2 root root   4096 2011-09-20 20:11 Desktop
drwxr-xr-x 2 root root   4096 2011-09-20 20:07 Documents
drwxr-xr-x 2 root root   4096 2011-09-20 20:07 Downloads
-rwxr-xr-x 1 root root   7091 2019-09-10 20:50 hello
-rwxr-xr-x 1 root root   5741 2019-09-10 21:36 hello.arm
-rwxr-xr-x 1 root root 648478 2019-09-10 21:38 hello.arm.st
-rwxr-xr-x 1 root root   7904 2019-09-10 21:30 hello.bin
-rw-r--r-- 1 root root     76 2019-09-10 20:44 hello.c
-rwxr-xr-x 1 root root 615991 2019-09-10 20:53 hello.static


root@ubuntu:~# gcc -o hello hello.c
root@ubuntu:~# ./hello
Embedded World....

------hello.c
#include <stdio.h>

int main()
{
#ifdef HELLO
	printf("hello world....\n");

#else
	printf("Embedded World....\n");
#endif
	return 0;
}
-----------------
#include <stdio.h>
#define HELLO
int main()
{
#ifdef HELLO
	printf("hello world....\n");

#else
	printf("Embedded World....\n");
#endif
	return 0;
}

root@ubuntu:~# !gcc
gcc -o hello hello.c
[1]+  Done                    gedit hello.c
root@ubuntu:~# ./hello
hello world....

gcc -o hello hello.c -DHELLO
하게되면 #define HELLO 한것과 같음

Kernel Configuration
커널의 어떤기능을 집어넣고 어떤 기능을 뺄거냐
커널에들어가면 그기능에들어가기위한코드가있어야되고....
설정을해놓고 빌드를할때 -D를 이용해 enable disable가능



mv ~/Downloads/Lab.Ch02.zip .

unzip -d lab Lab.Ch02.zip
cd lab
cd lab1
gedit * &
리눅스에서 *은 all을 의미한다

gcc -o test test.c 1.c 2.c
./test

------------------------------------------------------------------------------------------------------------------
2019/09/18
220.67.113.135:8000

root@ubuntu:~/Desktop/Imbeded/lab1# gcc -c 1.c
root@ubuntu:~/Desktop/Imbeded/lab1# gcc -c 2.c
root@ubuntu:~/Desktop/Imbeded/lab1# ls
1.c  1.o  2.c  2.o  test.c  test.h
root@ubuntu:~/Desktop/Imbeded/lab1# ar ruv libmy.a 1.o 2.o
ar: creating libmy.a
a - 1.o
a - 2.o
root@ubuntu:~/Desktop/Imbeded/lab1# nm libmy.a

1.o:
00000004 C a
00000000 D b
00000000 T fn1
         U printf

2.o:
00000000 t fn
00000030 T fn2
         U printf
00000000 b sa
00000000 d sb

^x^y  x를 y로 바꿔라

root@ubuntu:~/Desktop/Imbeded/lab1# gcc -o test test.c -L. -lmy
root@ubuntu:~/Desktop/Imbeded/lab1# ldd test
	linux-gate.so.1 =>  (0x00611000)
	libc.so.6 => /lib/libc.so.6 (0x00a8d000)
	/lib/ld-linux.so.2 (0x00981000)
root@ubuntu:~/Desktop/Imbeded/lab1# ls -l test
-rwxr-xr-x 1 root root 7273 2019-09-17 20:08 test
root@ubuntu:~/Desktop/Imbeded/lab1# ./test
Fn1 : [1st fn], 1001, 1002
Fn2 : [2nd fn], 3001, 3002

#history ( 사용했던 명령어를 보여줌)
root@ubuntu:~/Desktop/Imbeded/lab1# gcc -o test test.c -L. -lmy -static
root@ubuntu:~/Desktop/Imbeded/lab1# ldd test
	not a dynamic executable
root@ubuntu:~/Desktop/Imbeded/lab1# ls -l test
-rwxr-xr-x 1 root root 612041 2019-09-17 20:11 test
root@ubuntu:~/Desktop/Imbeded/lab1# ./test
Fn1 : [1st fn], 1001, 1002
Fn2 : [2nd fn], 3001, 3002

root@ubuntu:~/Desktop/Imbeded/lab1# gcc -o libmy.so 1.o 2.o -shared
root@ubuntu:~/Desktop/Imbeded/lab1# ls
1.c  1.o  2.c  2.o  libmy.a  libmy.so  test  test.c  test.h
root@ubuntu:~/Desktop/Imbeded/lab1# gcc -o test2 test.c -L. -lmy
root@ubuntu:~/Desktop/Imbeded/lab1# nm libmy.so

root@ubuntu:~/Desktop/Imbeded/lab1# ldd test2
	linux-gate.so.1 =>  (0x00176000)
	libmy.so => not found
	libc.so.6 => /lib/libc.so.6 (0x0087d000)
	/lib/ld-linux.so.2 (0x0013a000)

공유라이브러리는 특정한 디렉토리에 복사하거나 어디에 있는지 환경변수에 지정을 해줘야함

root@ubuntu:~/Desktop/Imbeded/lab1# ./test2
./test2: error while loading shared libraries: libmy.so: cannot open shared object file: No such file or directory
root@ubuntu:~/Desktop/Imbeded/lab1# export LD_LIBRARY_PATH=`pwd`
root@ubuntu:~/Desktop/Imbeded/lab1# echo $LD_LIBRARY_PATH
/root/Desktop/Imbeded/lab1
root@ubuntu:~/Desktop/Imbeded/lab1# ldd test2
	linux-gate.so.1 =>  (0x00db4000)
	libmy.so => /root/Desktop/Imbeded/lab1/libmy.so (0x007c9000)
	libc.so.6 => /lib/libc.so.6 (0x00110000)
	/lib/ld-linux.so.2 (0x00ab0000)
root@ubuntu:~/Desktop/Imbeded/lab1# ls -l test test2
-rwxr-xr-x 1 root root 612041 2019-09-17 20:11 test
-rwxr-xr-x 1 root root   7102 2019-09-17 20:13 test2



root@ubuntu:~/Desktop/Imbeded/lab2# ls
1.c  2.c  Makefile  test.c  test.h
root@ubuntu:~/Desktop/Imbeded/lab2# m Makefile
m: command not found
root@ubuntu:~/Desktop/Imbeded/lab2# make test.o
cc  -c  test.c
root@ubuntu:~/Desktop/Imbeded/lab2# ls
1.c  2.c  Makefile  test.c  test.h  test.o
root@ubuntu:~/Desktop/Imbeded/lab2# make 1.0
make: *** No rule to make target `1.0'.  Stop.
root@ubuntu:~/Desktop/Imbeded/lab2# make 1.o
cc  -c  1.c
root@ubuntu:~/Desktop/Imbeded/lab2# make clean
rm  -f  test  *.o
root@ubuntu:~/Desktop/Imbeded/lab2# ls
1.c  2.c  Makefile  test.c  test.h
root@ubuntu:~/Desktop/Imbeded/lab2# make
cc  -c  test.c
cc  -c  1.c
cc  -c  2.c
cc  -o  test  test.o 1.o 2.o
root@ubuntu:~/Desktop/Imbeded/lab2# ls
1.c  1.o  2.c  2.o  Makefile  test  test.c  test.h  test.o

root@ubuntu:~/Desktop/Imbeded/lab3# ls
1.c  2.c  Makefile.static  test.c  test.h
root@ubuntu:~/Desktop/Imbeded/lab3# gedit Makefile.static
root@ubuntu:~/Desktop/Imbeded/lab3# make libabc.a
make: *** No rule to make target `libabc.a'.  Stop.
root@ubuntu:~/Desktop/Imbeded/lab3# make libabc.a -f Makefile.static
cc  -c  1.c
cc  -c  2.c
ar  ruv  libabc.a  1.o 2.o
ar: creating libabc.a
a - 1.o
a - 2.o
root@ubuntu:~/Desktop/Imbeded/lab3# ls
1.c  1.o  2.c  2.o  libabc.a  Makefile.static  test.c  test.h
root@ubuntu:~/Desktop/Imbeded/lab3# make -f Makefile.static
cc  -c  test.c
cc  -static  -o  test  test.o  -L.  -labc
root@ubuntu:~/Desktop/Imbeded/lab3# ls
1.c  1.o  2.c  2.o  libabc.a  Makefile.static  test  test.c  test.h  test.o
root@ubuntu:~/Desktop/Imbeded/lab3# make clean
make: *** No rule to make target `clean'.  Stop.
root@ubuntu:~/Desktop/Imbeded/lab3# make clean -f Makefile.static
rm  -f  test  *.o  *.a  *.so
root@ubuntu:~/Desktop/Imbeded/lab3# ls
1.c  2.c  Makefile.static  test.c  test.h


root@ubuntu:~/Desktop/Imbeded/lab4# make -f Makefile.shared
cc  -c  test.c
cc  -c  -fPIC  1.c
cc  -c  -fPIC  2.c
cc  -shared  -o  libabc.so  1.o 2.o
cc  -o  test  test.o  -L.  -labc
root@ubuntu:~/Desktop/Imbeded/lab4# ./test
Fn1 : [1st fn], 1001, 1002
Fn2 : [2nd fn], 3001, 3002
root@ubuntu:~/Desktop/Imbeded/lab4# ldd ./test
	linux-gate.so.1 =>  (0x00712000)
	libabc.so => /root/Desktop/Imbeded/lab4/libabc.so (0x009b8000)
	libc.so.6 => /lib/libc.so.6 (0x003ce000)
	/lib/ld-linux.so.2 (0x007f7000)
root@ubuntu:~/Desktop/Imbeded/lab4# export LD_LIBRARY_PATH=`pwd`
root@ubuntu:~/Desktop/Imbeded/lab4# ldd ./test
	linux-gate.so.1 =>  (0x008a9000)
	libabc.so => /root/Desktop/Imbeded/lab4/libabc.so (0x007ac000)
	libc.so.6 => /lib/libc.so.6 (0x00e48000)
	/lib/ld-linux.so.2 (0x00543000)
root@ubuntu:~/Desktop/Imbeded/lab4# ./test
Fn1 : [1st fn], 1001, 1002
Fn2 : [2nd fn], 3001, 3002
root@ubuntu:~/Desktop/Imbeded/lab4# nm ./test
08049f20 d _DYNAMIC
08049ff4 d _GLOBAL_OFFSET_TABLE_
0804859c R _IO_stdin_used
         w _Jv_RegisterClasses
08049f10 d __CTOR_END__
08049f0c d __CTOR_LIST__
08049f18 D __DTOR_END__
08049f14 d __DTOR_LIST__
080485b0 r __FRAME_END__
08049f1c d __JCR_END__
08049f1c d __JCR_LIST__
0804a018 A __bss_start
0804a010 D __data_start
08048550 t __do_global_ctors_aux
08048430 t __do_global_dtors_aux
0804a014 D __dso_handle
         w __gmon_start__
0804854a T __i686.get_pc_thunk.bx
08049f0c d __init_array_end
08049f0c d __init_array_start
080484e0 T __libc_csu_fini
080484f0 T __libc_csu_init
         U __libc_start_main@@GLIBC_2.0
0804a018 A _edata
0804a020 A _end
0804857c T _fini
08048598 R _fp_hw
08048378 T _init
08048400 T _start
0804a018 b completed.7065
0804a010 W data_start
0804a01c b dtor_idx.7067
         U fn1
         U fn2
08048490 t frame_dummy
080484b4 T main

Lab05
모든디렉토리에 Makefile이 있는 경우
리눅스 커널 하나를 만들기위해 모든 소스파일을 실행하려고함.
.config 커널의 기능을 집어넣거나 뺄때 설정을 하고 여기에 저장.

root@ubuntu:~/Desktop/Imbeded/lab5# make
gcc  -c  -Iinclude  -DCONFIG_FN2 -DCONFIG_SUBFN  test.c // -I 어디에 headerfile이 있는지 포함 -D macro정의
make  -C  lib 
make[1]: Entering directory `/root/Desktop/Imbeded/lab5/lib'
gcc -c 1.c
gcc -c 2.c
make  -C  sub
make[2]: Entering directory `/root/Desktop/Imbeded/lab5/lib/sub'
gcc -c subfn.c
make[2]: Leaving directory `/root/Desktop/Imbeded/lab5/lib/sub'
ar  ruv  libabc.a  1.o 2.o sub/subfn.o
ar: creating libabc.a
a - 1.o
a - 2.o
a - sub/subfn.o
make[1]: Leaving directory `/root/Desktop/Imbeded/lab5/lib'
gcc  -o  test  test.o  -Llib  -labc

-------------------------#CONFIG_FN2=y
root@ubuntu:~/Desktop/Imbeded/lab5# make
gcc  -c  -Iinclude  test.c
make  -C  lib
make[1]: Entering directory `/root/Desktop/Imbeded/lab5/lib'
gcc -c 1.c
make  -C  sub
make[2]: Entering directory `/root/Desktop/Imbeded/lab5/lib/sub'
gcc -c subfn.c
make[2]: Leaving directory `/root/Desktop/Imbeded/lab5/lib/sub'
ar  ruv  libabc.a  1.o sub/subfn.o
ar: creating libabc.a
a - 1.o
a - sub/subfn.o
make[1]: Leaving directory `/root/Desktop/Imbeded/lab5/lib'
gcc  -o  test  test.o  -Llib  -labc

sub/Makefile
 --> obj-y = 1.o 
 --> obj-$(CONFIG_FN2) += 2.o
obj-y +=2.o = 1.o 2.o
obj- += 2.o = 2.o

lab5/Makefile
CROSS_COMPILE =   // arm-linux- 옵션을 넣고 뺄 수 있다. (임베디드 장치 사용시)
CC = $(CROSS_COMPILE)gcc


커널에 들어가는 기능을 우리가 선택하고 해제 할 수 있다.는것을 실습

Lab06


root@ubuntu:~/Desktop/Imbeded/lab6# diff -urN old new > tm
root@ubuntu:~/Desktop/Imbeded/lab6/old# patch -p1 <../tm
patching file main.c
patching file new.c
patching file sub/sub.c

-p1 전에 있던 파일을 무시하고 새로운 파일로 진행
-p0 전에 있던 파일을 고려하여 진행 (꼬일 수 있다.)
보통은 디렉토리 안에 들어와서 p1을 적용한다.
unzip -d lab Lab.Ch02.zip

root@ubuntu:~/Desktop/Imbeded# ls
lab1  lab2  lab3  lab4  lab5  lab6
root@ubuntu:~/Desktop/Imbeded# cd lab6
root@ubuntu:~/Desktop/Imbeded/lab6# diff -urN old new > tm
root@ubuntu:~/Desktop/Imbeded/lab6# ls
new  old  tm
root@ubuntu:~/Desktop/Imbeded/lab6# rm -r new
root@ubuntu:~/Desktop/Imbeded/lab6# ls
old  tm
root@ubuntu:~/Desktop/Imbeded/lab6# patch -p0 < tm
patching file old/main.c
patching file new/new.c
patching file new/sub/sub.c
root@ubuntu:~/Desktop/Imbeded/lab6# ls
new  old  tm
